# -*- coding: utf-8 -*-
"""777 HW1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cXHLd2VNy2Pp8f-STtw92ocF-nQ6qYyW

> To test the good wine quality based on the
"""

import numpy as np
import pandas as pd


import matplotlib.pyplot as plt
import seaborn as sns
df= pd.read_csv('Daily_all_feature_Ross_nomissing.csv')
df.head()

df.info()

df.isnull().sum()

df.describe()

"""##  plot histograms of any four features in one plot. Use different colors and transparency to make them visible.

"""

plt.figure(figsize=(10, 6))

plt.hist(df['LWD'],bins=30, alpha=0.8, label='LWD',color='red')
plt.hist(df['SWD'],bins=30, alpha=0.3, label='SWD',color='blue')
plt.hist(df['CTH'],bins=30, alpha=0.9, label='CTH',color='green')
plt.hist(df['SWU'],bins=30, alpha=0.7, label='SWU',color='yellow')

plt.legend(loc='upper right')

"""##  plot these features in a plot and use different axes to include them in one plot           SWU, T, TC, and SIE."""

# Selecting the four features to plot on different axes
features_to_plot = ['SWU', 'T', 'TC', 'SIE']

fig, ax1 = plt.subplots(figsize=(10, 6))

# First feature (SWU) on the primary y-axis
ax1.set_xlabel('Index')
ax1.set_ylabel('SWU', color='black')
ax1.plot(df.index, df['SWU'], label='SWU', color='black')
ax1.tick_params(axis='y', labelcolor='black')

# Create a second y-axis for 'T'
ax2 = ax1.twinx()
ax2.set_ylabel('T', color='blue')
ax2.plot(df.index, df['T'], label='T', color='blue')
ax2.tick_params(axis='y', labelcolor='blue')

# Create a third y-axis for 'TC'
ax3 = ax1.twinx()
ax3.spines['right'].set_position(('outward', 60))  # Shift the third y-axis to the right
ax3.set_ylabel('TC', color='red')
ax3.plot(df.index, df['TC'], label='TC', color='red')
ax3.tick_params(axis='y', labelcolor='red')

# Create a fourth y-axis for 'SIE'
ax4 = ax1.twinx()
ax4.spines['right'].set_position(('outward', 120))
ax4.set_ylabel('SIE', color='gray')
ax4.plot(df.index, df['SIE'], label='SIE', color='gray')
ax4.tick_params(axis='y', labelcolor='gray')

# Add a title to the plot
plt.title('Plot of SWU, T, TC, and SIE with Different Axes')

# Show the plot
plt.tight_layout()
plt.show()

"""##plot these features in a plot and use the standardization to include them in one plot.         LWU, U, CBP, and SIE.
  
"""

from sklearn.preprocessing import StandardScaler

# Selecting the four features to plot
features_to_plot = ['LWU', 'U', 'CBP', 'SIE']

# Standardizing the data using StandardScaler
scaler = StandardScaler()
standardized_data = scaler.fit_transform(df[features_to_plot])

# Convert the standardized data back into a DataFrame for easier plotting
standardized_df = pd.DataFrame(standardized_data, columns=features_to_plot)

# Plot the standardized features
plt.figure(figsize=(10, 6))

# Plot each standardized feature on the same plot
for feature in features_to_plot:
    plt.plot(df.index, standardized_df[feature], label=feature)

plt.xlabel('Index')
plt.ylabel('Standardized Value')
plt.title('Standardized Plot of LWU, U, CBP, and SIE')
plt.legend(loc='upper right')

plt.tight_layout()
plt.show()

"""## Make two box diagrams (any two features of your choice) in one plot and plot them in different colors so that they are easily distinguishable.

"""

df.info()

# Creating a figure for box plot
plt.figure(figsize=(8, 6))

# Plotting the box plot for 'LWD'
plt.boxplot(df['LWD'], positions=[1], patch_artist=True,
            boxprops=dict(facecolor='blue', color='blue'),
            medianprops=dict(color='yellow'),
            whiskerprops=dict(color='blue'),
            capprops=dict(color='blue'),
            flierprops=dict(markerfacecolor='red', marker='o'))

# Plotting the box plot for 'TC' at a different position with a different color
plt.boxplot(df['TC'], positions=[2], patch_artist=True,
            boxprops=dict(facecolor='green', color='green'),
            medianprops=dict(color='yellow'),
            whiskerprops=dict(color='green'),
            capprops=dict(color='green'),
            flierprops=dict(markerfacecolor='red', marker='o'))

# Adding custom labels for x-axis
plt.xticks([1, 2], ['LWD', 'TC'])

# Adding title and labels
plt.title('Box Plot of LWD and TC with Different Colors')
plt.ylabel('Values')

# Display the plot
plt.tight_layout()
plt.show()

"""## Now Load the wine dataset and plot a scatterplot matrix and a heat map."""

import pandas as pd

df_wine = pd.read_csv('https://archive.ics.uci.edu/'
                      'ml/machine-learning-databases/wine/wine.data',
                      header=None)



# df_wine = pd.read_csv('wine.data', header=None)


df_wine.columns = ['Class label', 'Alcohol', 'Malic acid', 'Ash',
                   'Alcalinity of ash', 'Magnesium', 'Total phenols',
                   'Flavanoids', 'Nonflavanoid phenols', 'Proanthocyanins',
                   'Color intensity', 'Hue', 'OD280/OD315 of diluted wines',
                   'Proline']

df_wine.columns

df_wine.head()

"""##  plot a scatterplot matrix"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt



# Create a scatterplot matrix
sns.set(style="white")  # Set the style of the plot to a simple white background
g = sns.pairplot(df_wine, hue='Class label', palette='viridis', diag_kind='hist', markers=["o", "s", "D"])
g.fig.suptitle('Scatterplot Matrix for Wine Dataset', y=1.03)  # Add a title and adjust the spacing
plt.show()

"""## Heat map"""

correlation_matrix = df_wine.corr()

# Plot the heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Heatmap of Feature Correlations in the Wine Dataset')
plt.show()

"""## Plot the histograms for the proline concentrations in wine class levels 1 and 3.  Then plot the Gaussian distribution function for proline on top of the histograms."""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm

# Filter the dataset for class 1 and class 3
class_1 = df_wine[df_wine['Class label'] == 1]['Proline']
class_3 = df_wine[df_wine['Class label'] == 3]['Proline']

# Plot histograms for class 1 and class 3
plt.figure(figsize=(10, 6))
sns.histplot(class_1, color='blue', kde=False, label='Class 1', stat='density', bins=15)
sns.histplot(class_3, color='red', kde=False, label='Class 3', stat='density', bins=15)

# Calculate mean and standard deviation for Gaussian distribution of Proline for each class
mean1, std1 = norm.fit(class_1)
mean3, std3 = norm.fit(class_3)

# Generate points on the x axis between min and max values of class 1 and class 3 proline levels
x_axis = np.linspace(min(class_1.min(), class_3.min()), max(class_1.max(), class_3.max()), 100)

# Plot the normal distribution with the same mean and std as the data
plt.plot(x_axis, norm.pdf(x_axis, mean1, std1), 'b--', linewidth=2)
plt.plot(x_axis, norm.pdf(x_axis, mean3, std3), 'r--', linewidth=2)

# Add labels and title
plt.xlabel('Proline Concentration')
plt.ylabel('Density')
plt.title('Histogram and Gaussian Distribution for Proline Concentration')
plt.legend()

# Show the plot
plt.show()

"""## What is the probability of having a concentration of
 a.600 and 1400 in class 1 wine <br>
 b.400 and 1200 in class 3 wine.
"""

from scipy.stats import norm

# Assuming 'class_1' and 'class_3' are already filtered and 'mean1', 'std1', 'mean3', 'std3' are calculated as shown previously

# Proline concentrations to evaluate
proline_values_class_1 = [600, 1400]
proline_values_class_3 = [400, 1200]

# Calculate the probability densities for the specified concentrations in class 1
prob_densities_class_1 = [norm.pdf(x, mean1, std1) for x in proline_values_class_1]

# Calculate the probability densities for the specified concentrations in class 3
prob_densities_class_3 = [norm.pdf(x, mean3, std3) for x in proline_values_class_3]

# Print results
print("Probability Densities for Class 1 Proline at:")
for concentration, density in zip(proline_values_class_1, prob_densities_class_1):
    print(f"  {concentration} units: {density:.8f}")

print("\nProbability Densities for Class 3 Proline at:")
for concentration, density in zip(proline_values_class_3, prob_densities_class_3):
    print(f"  {concentration} units: {density:.8f}")

"""## If someone dislikes the taste of Proline and likes to drink wine, which wine should he choose?


"""

# Mean Proline concentration in each class
mean_proline_class_1 = df_wine[df_wine['Class label'] == 1]['Proline'].mean()
mean_proline_class_2 = df_wine[df_wine['Class label'] == 2]['Proline'].mean()
mean_proline_class_3 = df_wine[df_wine['Class label'] == 3]['Proline'].mean()

# Display the results
print(f"Mean Proline Concentrations:")
print(f"Class 1: {mean_proline_class_1:.2f}")
print(f"Class 2: {mean_proline_class_2:.2f}")
print(f"Class 3: {mean_proline_class_3:.2f}")

# Recommendation based on the lowest mean Proline concentration
if mean_proline_class_1 < mean_proline_class_2 and mean_proline_class_1 < mean_proline_class_3:
    recommended_class = 1
elif mean_proline_class_2 < mean_proline_class_3:
    recommended_class = 2
else:
    recommended_class = 3

print(f"\nRecommendation: Choose wine from Class {recommended_class} for the lowest average Proline concentration.")